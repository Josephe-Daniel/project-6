// IMPORT PACKAGE
const mongoose = require("mongoose");

// VALIDATION OF SAUCE FORM INPUT
/**
 * Checks the field entries of the sauce form:
 *  - compare the field string with the Regexp
 *    and return "true" or "false" that indicates
 *    whether or not the pattern exists in the string.
 * @param {String} name          Sauce name
 * @param {String} manufacturer  Sauce maker
 * @param {String} description   Sauce description
 * @param {String} mainPepper    Main spicy ingredient of the sauce
 * @returns {Boolean}            Return true or false
 */
let inputValidation = function (name, manufacturer, description, mainPepper) {
  let re = /[\p{Letter}\s'-]+/gu;
  return re.test(name, manufacturer, description, mainPepper);
};

/* Messages explaining validation denial reasons */
let errorMin = "Lenght must be at least 3 chars";
let errorMax = "Length must not exceed 30 chars";
let errorDescMax = "Length must not exceed 150 chars";
let errorInput = "Should contain alphabetics characters only";

// SAUCE MODEL
/**
 * Creates a data schema that contains the desired fields for each "Sauce",
 * indicates their type as well as their character (mandatory or not).
 * Uses the Schema validation made available by "mongoose" for the validation of
 * the sauce form inputs.
 * No need to put a field for the Id since it is automatically generated by "mongoose".
 */
const sauceSchema = mongoose.Schema({
  userId: { type: String, required: true },
  name: {
    type: String,
    required: true,
    minLength: [3, errorMin],
    maxLength: [30, errorMax],
    validate: [inputValidation, errorInput],
  },
  manufacturer: {
    type: String,
    required: true,
    minLength: [3, errorMin],
    maxLength: [30, errorMax],
    validate: [inputValidation, errorInput],
  },
  description: {
    type: String,
    required: true,
    minLength: [3, errorMin],
    maxLength: [150, errorDescMax],
    validate: [inputValidation, errorInput],
  },
  mainPepper: {
    type: String,
    required: true,
    minLength: [3, errorMax],
    maxLength: [30, errorMax],
    validate: [inputValidation, errorInput],
  },
  imageUrl: { type: String, required: true },
  heat: { type: Number, min: 1, max: 10, required: true },
  likes: { type: Number, required: true, default: 0 },
  dislikes: { type: Number, required: true, default: 0 },
  usersLiked: { type: [String], required: true, default: [] },
  usersDisliked: { type: [String], required: true, default: [] },
});

// EXPORT SAUCE MODEL
/**
 * Exports this schema as a Mongoose model called "Sauce",
 * thereby making it available for our Express application.
 */
module.exports = mongoose.model("Sauce", sauceSchema);
